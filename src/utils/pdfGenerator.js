import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { format } from 'date-fns';

/**
 * Generate a PDF file for an E-FIR report
 * @param {Object} report - The report data
 * @returns {Blob} - PDF file as a Blob
 */
export const generateEFIRPDF = (report) => {
  // Create new PDF document
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  
  // Add header
  doc.setFontSize(20);
  doc.setTextColor(0, 0, 0);
  doc.text('ELECTRONIC FIRST INFORMATION REPORT', pageWidth / 2, 20, { align: 'center' });
  
  // Add FIR number and date
  doc.setFontSize(12);
  doc.text(`FIR Number: ${report.firNumber}`, 20, 30);
  doc.text(`Date: ${new Date(report.createdAt).toLocaleDateString()}`, pageWidth - 20, 30, { align: 'right' });
  
  // Status and priority
  doc.setFontSize(11);
  doc.text(`Status: ${report.status.toUpperCase()}`, 20, 40);
  doc.text(`Priority: ${report.priority.toUpperCase()}`, pageWidth - 20, 40, { align: 'right' });
  
  // Add horizontal line
  doc.setDrawColor(0, 0, 0);
  doc.setLineWidth(0.5);
  doc.line(20, 45, pageWidth - 20, 45);
  
  // Basic information section
  doc.setFontSize(14);
  doc.text('BASIC INFORMATION', 20, 55);
  
  // Create a table for basic information
  doc.autoTable({
    startY: 60,
    head: [['Field', 'Value']],
    body: [
      ['Report Type', report.reportType],
      ['Generated By', report.generatedBy],
      ['Assigned To', report.assignedTo || 'Not assigned'],
      ['Created At', new Date(report.createdAt).toLocaleString()],
      ['Last Updated', new Date(report.updatedAt).toLocaleString()]
    ],
    theme: 'grid',
    headStyles: { fillColor: [66, 66, 66] },
    margin: { left: 20, right: 20 }
  });
  
  // Tourist information section
  let currentY = doc.previousAutoTable.finalY + 15;
  doc.setFontSize(14);
  doc.text('TOURIST INFORMATION', 20, currentY);
  
  // Create a table for tourist information
  doc.autoTable({
    startY: currentY + 5,
    head: [['Field', 'Value']],
    body: [
      ['Tourist Name', report.tourist?.name || report.touristName || 'N/A'],
      ['Tourist ID', report.touristId || 'N/A'],
      ['Location', report.location || 'Unknown location'],
      ['Coordinates', `${report.latitude || 'N/A'}, ${report.longitude || 'N/A'}`]
    ],
    theme: 'grid',
    headStyles: { fillColor: [66, 66, 66] },
    margin: { left: 20, right: 20 }
  });
  
  // Incident details section
  currentY = doc.previousAutoTable.finalY + 15;
  doc.setFontSize(14);
  doc.text('INCIDENT DETAILS', 20, currentY);
  
  // Create a table for incident summary
  doc.autoTable({
    startY: currentY + 5,
    head: [['Field', 'Value']],
    body: [
      ['Incident Type', report.incidentType],
      ['Incident ID', report.incidentId || 'N/A']
    ],
    theme: 'grid',
    headStyles: { fillColor: [66, 66, 66] },
    margin: { left: 20, right: 20 }
  });
  
  // Summary and details
  currentY = doc.previousAutoTable.finalY + 15;
  doc.setFontSize(14);
  doc.text('SUMMARY', 20, currentY);
  
  // Add summary text
  doc.setFontSize(11);
  const summaryLines = doc.splitTextToSize(report.summary, pageWidth - 40);
  doc.text(summaryLines, 20, currentY + 10);
  
  // Calculate where to place the detailed description
  currentY = currentY + 10 + (summaryLines.length * 5) + 15;
  
  // Check if we need a new page
  if (currentY > doc.internal.pageSize.height - 50) {
    doc.addPage();
    currentY = 20;
  }
  
  // Add detailed description
  doc.setFontSize(14);
  doc.text('DETAILED DESCRIPTION', 20, currentY);
  
  doc.setFontSize(11);
  const detailLines = doc.splitTextToSize(report.details, pageWidth - 40);
  doc.text(detailLines, 20, currentY + 10);
  
  // Footer with page numbers
  const totalPages = doc.internal.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.text(`Page ${i} of ${totalPages}`, pageWidth - 20, doc.internal.pageSize.height - 10, { align: 'right' });
    
    // Add watermark for auto-generated reports
    if (report.isAutomaticallyGenerated) {
      doc.setTextColor(200, 200, 200);
      doc.setFontSize(40);
      doc.text('AUTOMATICALLY GENERATED', pageWidth / 2, doc.internal.pageSize.height / 2, {
        align: 'center',
        angle: 45
      });
      doc.setTextColor(0, 0, 0);
    }
    
    // Add the current date and time in the footer
    doc.setFontSize(10);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, doc.internal.pageSize.height - 10);
  }
  
  // Return the PDF as a blob
  return doc.output('blob');
};

export const generatePDF = async (options) => {
  const { title, type, reportNumber, date, content, template = 'default' } = options;
  
  // Create new PDF document
  const doc = new jsPDF();
  
  // Common header
  doc.setFontSize(22);
  doc.setTextColor(0, 0, 128);
  doc.text(title, 105, 20, { align: 'center' });
  
  doc.setFontSize(12);
  doc.setTextColor(100, 100, 100);
  doc.text(`Report #: ${reportNumber}`, 105, 30, { align: 'center' });
  doc.text(`Generated on: ${date}`, 105, 35, { align: 'center' });
  
  // Select template based on type
  switch (template) {
    case 'efir':
      generateEFIRTemplate(doc, content);
      break;
    case 'incident':
      generateIncidentTemplate(doc, content);
      break;
    case 'tourist':
      generateTouristTemplate(doc, content);
      break;
    default:
      generateDefaultTemplate(doc, content);
  }
  
  // Footer
  const pageCount = doc.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.setTextColor(150, 150, 150);
    doc.text(`Page ${i} of ${pageCount}`, 105, 290, { align: 'center' });
  }
  
  return doc.output('blob');
};

function generateEFIRTemplate(doc, content) {
  doc.setFontSize(16);
  doc.setTextColor(0, 0, 0);
  doc.text('ELECTRONIC FIRST INFORMATION REPORT', 105, 50, { align: 'center' });
  
  doc.setFontSize(11);
  doc.setTextColor(0, 0, 0);
  
  // E-FIR Details
  doc.text('FIR DETAILS:', 14, 65);
  doc.line(14, 67, 196, 67);
  
  const startY = 75;
  const lineHeight = 7;
  
  doc.text(`FIR Number: EFIR-${content.id}`, 14, startY);
  doc.text(`Status: ${content.status}`, 14, startY + lineHeight);
  doc.text(`Priority: ${content.priority}`, 14, startY + lineHeight * 2);
  doc.text(`Location: ${content.location}`, 14, startY + lineHeight * 3);
  doc.text(`Filed Date: ${format(new Date(content.created_at || Date.now()), 'PPpp')}`, 14, startY + lineHeight * 4);
  
  // Related Entity Details
  let currentY = startY + lineHeight * 6;
  
  if (content.entity_type === 'tourist') {
    doc.text('MISSING PERSON DETAILS:', 14, currentY);
    doc.line(14, currentY + 2, 196, currentY + 2);
    currentY += 10;
    
    const touristData = content.details?.tourist_data || content.related_entity || {};
    
    doc.text(`Name: ${touristData.name || 'Not available'}`, 14, currentY);
    doc.text(`Age: ${touristData.age || 'Not available'}`, 14, currentY + lineHeight);
    doc.text(`Gender: ${touristData.gender || 'Not available'}`, 14, currentY + lineHeight * 2);
    doc.text(`Nationality: ${touristData.nationality || 'Not available'}`, 14, currentY + lineHeight * 3);
    doc.text(`Passport Number: ${touristData.passport_number || 'Not available'}`, 14, currentY + lineHeight * 4);
    doc.text(`Last Seen: ${touristData.last_seen_time ? format(new Date(touristData.last_seen_time), 'PPpp') : 'Not available'}`, 14, currentY + lineHeight * 5);
    doc.text(`Last Known Location: ${touristData.last_known_location || 'Not available'}`, 14, currentY + lineHeight * 6);
    doc.text(`Appearance: ${touristData.appearance || 'Not available'}`, 14, currentY + lineHeight * 7);
    
    currentY += lineHeight * 9;
  } else if (content.entity_type === 'incident') {
    doc.text('INCIDENT DETAILS:', 14, currentY);
    doc.line(14, currentY + 2, 196, currentY + 2);
    currentY += 10;
    
    const incidentData = content.details?.incident_data || content.related_entity || {};
    
    doc.text(`Incident Type: ${incidentData.type || 'Not available'}`, 14, currentY);
    doc.text(`Severity: ${incidentData.severity || 'Not available'}`, 14, currentY + lineHeight);
    doc.text(`Timestamp: ${incidentData.timestamp ? format(new Date(incidentData.timestamp), 'PPpp') : 'Not available'}`, 14, currentY + lineHeight * 2);
    doc.text(`Location: ${incidentData.location || 'Not available'}`, 14, currentY + lineHeight * 3);
    
    currentY += lineHeight * 5;
    
    if (incidentData.description) {
      doc.text('Description:', 14, currentY);
      
      // Handle long descriptions with wrapping
      const splitDescription = doc.splitTextToSize(incidentData.description, 170);
      doc.text(splitDescription, 14, currentY + lineHeight);
      
      currentY += lineHeight * (2 + splitDescription.length);
    }
    
    if (incidentData.involved_parties && incidentData.involved_parties.length > 0) {
      doc.text('Involved Parties:', 14, currentY);
      currentY += lineHeight;
      
      doc.autoTable({
        startY: currentY,
        head: [['Name', 'Type', 'ID', 'Details']],
        body: incidentData.involved_parties.map(party => [
          party.name || 'N/A',
          party.type || 'N/A',
          party.id || 'N/A',
          party.details || 'N/A'
        ]),
        margin: { left: 14 },
        theme: 'grid'
      });
      
      currentY = doc.previousAutoTable.finalY + 10;
    }
  }
  
  // Additional Information
  doc.text('ADDITIONAL INFORMATION:', 14, currentY);
  doc.line(14, currentY + 2, 196, currentY + 2);
  currentY += 10;
  
  doc.text(`Report Generated By: Automated System`, 14, currentY);
  doc.text(`Generation Time: ${format(new Date(), 'PPpp')}`, 14, currentY + lineHeight);
  
  currentY += lineHeight * 3;
  
  // Actions and Notes
  doc.text('ACTIONS REQUIRED:', 14, currentY);
  doc.line(14, currentY + 2, 196, currentY + 2);
  currentY += 10;
  
  if (content.entity_type === 'tourist') {
    doc.text('1. Dispatch local units to last known location', 14, currentY);
    doc.text('2. Contact nearby hotels and establishments', 14, currentY + lineHeight);
    doc.text('3. Alert border control and transportation hubs', 14, currentY + lineHeight * 2);
    doc.text('4. Notify embassy or consulate', 14, currentY + lineHeight * 3);
  } else {
    doc.text('1. Respond to incident location', 14, currentY);
    doc.text('2. Secure the area and gather evidence', 14, currentY + lineHeight);
    doc.text('3. Interview witnesses', 14, currentY + lineHeight * 2);
    doc.text('4. File follow-up report', 14, currentY + lineHeight * 3);
  }
  
  // Signature section
  currentY += lineHeight * 6;
  doc.line(30, currentY, 90, currentY);
  doc.line(120, currentY, 180, currentY);
  currentY += lineHeight;
  doc.text('Authorized Official', 60, currentY, { align: 'center' });
  doc.text('Station In-charge', 150, currentY, { align: 'center' });
}

function generateIncidentTemplate(doc, content) {
  // Implementation for incident reports
  doc.text('INCIDENT REPORT', 105, 50, { align: 'center' });
  
  // Add incident-specific content...
}

function generateTouristTemplate(doc, content) {
  // Implementation for tourist reports
  doc.text('TOURIST REPORT', 105, 50, { align: 'center' });
  
  // Add tourist-specific content...
}

function generateDefaultTemplate(doc, content) {
  doc.setFontSize(14);
  doc.text('Report Content:', 14, 50);
  
  // Generic JSON content display
  const contentStr = JSON.stringify(content, null, 2);
  const splitContent = doc.splitTextToSize(contentStr, 180);
  
  doc.setFontSize(10);
  doc.text(splitContent, 14, 60);
}

export default {
  generateEFIRPDF,
  generatePDF
};